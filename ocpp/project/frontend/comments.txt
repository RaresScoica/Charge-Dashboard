def changeMongoDB():
    db = client['EV_Stations']
    collection = db['transactions']

    # Filter for documents to update
    filter = { 'sn': 'C6E12BCC23ZRKUWYRD' }

    try:
        print("Attempting to find documents...")
        documents = collection.find(filter)
        documents_list = list(documents)
        print(f"Documents found: {documents_list}")
        if not documents_list:
            print("No documents found matching the filter.")
        else:
            print(f"Found {len(documents_list)} document(s) matching the filter.")
    except Exception as e:
        print(f"Error finding documents: {e}")
        raise

    # Check if documents are found
    if documents_list:
        # Initialize the counter
        k = 1

        # Prepare bulk operations
        bulk_updates = []
        for doc in documents_list:
            update = { '$set': { 'nr': k } }
            bulk_updates.append(UpdateOne({ '_id': doc['_id'] }, update))
            k += 1

        # Execute the bulk operations
        if bulk_updates:
            try:
                result = collection.bulk_write(bulk_updates)
                print(f'Matched {result.matched_count} document(s) and modified {result.modified_count} document(s)')
            except Exception as e:
                print(f"Error performing bulk write: {e}")
        else:
            print('No updates to perform.')
    else:
        print("No documents found matching the filter.")

@app.route('/diagnostics', methods=['POST'])
def receive_diagnostics():
    try:
        if 'file' not in request.files:
            app.logger.error("No file part in the request")
            return "No file part", 400
        
        file = request.files['file']
        
        if file.filename == '':
            app.logger.error("No selected file")
            return "No selected file", 400
        
        # Define the file path
        save_path = r"C:\Users\developer\Documents\ws-server\main\ocpp-project\ocpp\project\diagnostics"
        
        # Ensure the directory exists
        if not os.path.exists(save_path):
            os.makedirs(save_path)
        
        # Complete file path
        file_path = os.path.join(save_path, file.filename)
        app.logger.info(f"Saving file to: {file_path}")
        
        # Save the file to the desired location
        file.save(file_path)
        app.logger.info("File uploaded successfully")
        
        return "File uploaded successfully", 200
    
    except Exception as e:
        app.logger.error(f"Error saving file: {e}")
        return str(e), 500
   